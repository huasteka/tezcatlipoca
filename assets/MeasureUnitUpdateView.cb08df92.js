import{_ as p}from"./StorageMeasureUnitForm.ffff4884.js";import{N as o,r as f}from"./index.917c111f.js";import{u as g}from"./storage.be6d3a79.js";import{e as h,L as _,o as s,g as a,M as U,u as n,h as v,Q as L,F as N,i as M}from"./vendor.2c85bd1e.js";import"./interceptor.bb9bfcba.js";const S=M("h2",null,"Update measurement unit",-1),b={key:0},x={props:{measureUnitId:Number},setup(u){const m=u,t=g(),e=h({measureUnit:null,isLoading:!0});t.fetchOneMeasureUnit(m.measureUnitId).then(()=>{e.isLoading=!1,e.measureUnit=t.selectedMeasureUnit});const c=r=>{e.isLoading=!0,t.updateMeasureUnit(r).then(()=>{o.notifySuccess("Measurement unit updated"),f.push({path:"/dashboard/storage-management/measure-units"})}).catch(()=>o.notifyError("Could not update measurement unit")).finally(()=>e.isLoading=!1)};return(r,i)=>{const d=_("loading");return s(),a(N,null,[S,U((s(),a("div",null,[n(e).measureUnit!==null?(s(),a("div",b,[v(p,{"measure-unit":n(e).measureUnit,onSubmit:i[0]||(i[0]=l=>c(l))},null,8,["measure-unit"])])):L("",!0)])),[[d,n(e).isLoading]])],64)}}};export{x as default};
